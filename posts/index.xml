<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Andreas Fritzler</title><link>https://afritzler.github.io/posts/</link><description>Recent content in Posts on Andreas Fritzler</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>&lt;a href="https://creativecommons.org/licenses/by-nc/4.0/" target="_blank" rel="noopener">CC BY-NC 4.0&lt;/a></copyright><lastBuildDate>Fri, 28 Apr 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://afritzler.github.io/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>How to Rotate GCP Service Account Keys with GitHub Actions</title><link>https://afritzler.github.io/posts/how-to-rotate-gcp-service-account-keys-with-github-actions/</link><pubDate>Fri, 28 Apr 2023 00:00:00 +0000</pubDate><guid>https://afritzler.github.io/posts/how-to-rotate-gcp-service-account-keys-with-github-actions/</guid><description>In this blog post, we&amp;rsquo;ll cover how to automate the rotation of Google Cloud Platform (GCP) service account keys using GitHub Actions. Regularly rotating service account keys is a security best practice to help mitigate the risk of unauthorized access.
Prerequisites Before we start, ensure that you have the following set up:
A GCP project with a service account and key. A GitHub account and a GitHub repository. The Google Cloud SDK (gcloud) installed and configured.</description><content type="html"><![CDATA[<p>In this blog post, we&rsquo;ll cover how to automate the rotation of Google Cloud Platform (GCP) service account keys using
GitHub Actions. Regularly rotating service account keys is a security best practice to help mitigate the risk of
unauthorized access.</p>
<h2 id="prerequisites">Prerequisites</h2>
<p>Before we start, ensure that you have the following set up:</p>
<ol>
<li>A GCP project with a service account and key.</li>
<li>A GitHub account and a GitHub repository.</li>
<li>The <a href="https://cloud.google.com/sdk">Google Cloud SDK (gcloud)</a> installed and configured.</li>
<li>The <a href="https://cli.github.com/">GitHub CLI (gh)</a> installed and authenticated.</li>
</ol>
<h2 id="rotating-gcp-service-account-keys-using-github-actions">Rotating GCP Service Account Keys using GitHub Actions</h2>
<p>Here are the steps to set up a GitHub Action for rotating GCP service account keys:</p>
<h3 id="1-create-github-secrets">1. Create GitHub Secrets</h3>
<p>Create the following secrets in your GitHub repository (Settings &gt; Secrets &gt; New repository secret):</p>
<ul>
<li><code>GCP_PROJECT_ID</code>: Your GCP project ID</li>
<li><code>GCP_SA_KEY</code>: Your GCP service account JSON key file, encoded in base64 (use <code>base64 &lt;key-file&gt;.json</code> to get the encoded content)</li>
</ul>
<h3 id="2-create-the-github-workflow">2. Create the GitHub Workflow</h3>
<p>Create a new file in your repository: <code>.github/workflows/rotate-gcp-service-account-key.yml</code> and add the following content:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">name</span>: <span style="color:#ae81ff">Rotate GCP Service Account Key</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">on</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">workflow_dispatch</span>:
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">jobs</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">rotate-key</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">runs-on</span>: <span style="color:#ae81ff">ubuntu-latest</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">steps</span>:
</span></span><span style="display:flex;"><span>    - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Checkout repository</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">uses</span>: <span style="color:#ae81ff">actions/checkout@v2</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Set up Google Cloud SDK</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">uses</span>: <span style="color:#ae81ff">google-github-actions/setup-gcloud@v0.2.1</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">with</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">project_id</span>: <span style="color:#ae81ff">${{ secrets.GCP_PROJECT_ID }}</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">service_account_key</span>: <span style="color:#ae81ff">${{ secrets.GCP_SA_KEY }}</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">export_default_credentials</span>: <span style="color:#66d9ef">true</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Rotate Service Account Key</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">run</span>: |<span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        SERVICE_ACCOUNT_NAME=&#34;your-service-account-name&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        KEY_FILE=&#34;new-service-account-key.json&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        PROJECT_ID=&#34;${{ secrets.GCP_PROJECT_ID }}&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        SERVICE_ACCOUNT_EMAIL=&#34;$SERVICE_ACCOUNT_NAME@$PROJECT_ID.iam.gserviceaccount.com&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        # Create a new service account key
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        gcloud iam service-accounts keys create $KEY_FILE --iam-account $SERVICE_ACCOUNT_EMAIL
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        # Encode the new key file in base64
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        ENCODED_KEY=$(base64 $KEY_FILE)
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        # Update the GitHub secret with the new key
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        echo $ENCODED_KEY | gh secret set GCP_SA_KEY --repo $GITHUB_REPOSITORY --body -
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        # Get the existing keys and remove the oldest key
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        OLD_KEY_ID=$(gcloud iam service-accounts keys list --iam-account $SERVICE_ACCOUNT_EMAIL --format=&#34;get(name.basename())&#34; --sort-by=&#34;~validAfterTime&#34; --limit=1)
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        if [ ! -z &#34;$OLD_KEY_ID&#34; ]; then
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">          gcloud iam service-accounts keys delete $OLD_KEY_ID --iam-account $SERVICE_ACCOUNT_EMAIL --quiet
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        fi
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        # Clean up the generated key file
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        rm $KEY_FILE</span>        
</span></span></code></pre></div><p>Replace <code>your-service-account-name</code> with the name of the service account you want to rotate the key for.</p>
<h3 id="3-run-the-workflow">3. Run the Workflow</h3>
<p>You can now manually trigger the rotation of the GCP service account key by navigating to the &ldquo;Actions&rdquo; tab in your
repository, selecting the &ldquo;Rotate GCP Service Account Key&rdquo; workflow, and clicking on &ldquo;Run workflow.&rdquo;</p>
<h3 id="conclusion">Conclusion</h3>
<p>In this blog post, we&rsquo;ve shown you how to set up a GitHub Actions workflow to rotate GCP service account keys
automatically. By following these steps, you can improve the security of your GCP projects and ensure that your
service account keys are regularly rotated according to best practices.</p>
<p>GitHub Actions provides a powerful and flexible platform for automating various tasks, including managing cloud
infrastructure, building and deploying applications, and automating security practices. With the integration of GCP
and GitHub Actions, you can create seamless workflows to manage and maintain your cloud resources effectively.</p>
<p>Happy automating!</p>
]]></content></item><item><title>4 Weeks with the Keychron K6 Mechanical Keyboard</title><link>https://afritzler.github.io/posts/4-weeks-with-the-keychron-k6-mechanical-keyboard/</link><pubDate>Fri, 17 Jul 2020 11:24:55 +0200</pubDate><guid>https://afritzler.github.io/posts/4-weeks-with-the-keychron-k6-mechanical-keyboard/</guid><description>Four weeks ago I stumbled upon the mechanical keyboards from Keychron on social media. Since I was thinking about switching my current setup consisting of a Magic Keyboard, Magic Mouse, a regular Logitech mouse and Keyboard connected to my MacBook Pro and Linux box respectively, to a setup supporting multiple devices at once.
I defined for me the following requirements for a keyboard:
Wireless/Bluetooth (sick of having cables all over the place) Build in battery (replacing batteries every 2 weeks is a pain and an environmental disaster) Multi device support (ideally 3 or more) Mechanical keys (for the better touch) Compact (&amp;lt; 100%) layout (no need for numpad) Retro look (:-)) From browsing keyboards from various vendors my choice fell on the Keychron K6 mechanical with brown Gateron switches with white background lighting.</description><content type="html"><![CDATA[<p>Four weeks ago I stumbled upon the mechanical keyboards from <a href="https://keychron.com">Keychron</a> on social media. Since I was thinking about switching my current setup consisting of a Magic Keyboard, Magic Mouse, a regular Logitech mouse and Keyboard connected to my MacBook Pro and Linux box respectively, to a setup supporting multiple devices at once.</p>
<p>I defined for me the following requirements for a keyboard:</p>
<ul>
<li>Wireless/Bluetooth (sick of having cables all over the place)</li>
<li>Build in battery (replacing batteries every 2 weeks is a pain and an environmental disaster)</li>
<li>Multi device support (ideally 3 or more)</li>
<li>Mechanical keys (for the better touch)</li>
<li>Compact (&lt; 100%) layout (no need for numpad)</li>
<li>Retro look (:-))</li>
</ul>
<p>From browsing keyboards from various vendors my choice fell on the Keychron K6 mechanical with brown Gateron switches with white background lighting.</p>
<p><img src="/img/keychronk6/keychronk6.png" alt="Keychron K6"></p>
<p>With $69 (excluding shipping) that is actually the cheapest K6 configuration you can get. I don&rsquo;t need RGB backlight because I am not a pro-gamer. Neither do I need the hotswappable keys as I am not planing to mod my keyboard with custom key caps and switches.</p>
<p>The checkout and ordering process was pretty straight forward and 5 business days later the keyboard arrived here in Germany.</p>
<h2 id="first-impressions">First Impressions</h2>
<p>I won&rsquo;t do any unboxing or close ups as there are plenty on YouTube and other sites. It is impressive how well the build quality of the K6 is. Even though the keyboard is entirely made out of plastics it feels heavy and has kind of solid touch to it. I didn&rsquo;t go for the Aluminum frame version since it is basically just the standard model wrapped in an Aluminum surrounding.</p>
<h2 id="setup">Setup</h2>
<p>Putting the side switch to the Bluetooth (BT) position and holding the <code>fn1 + Q</code> (or W, E) keys, puts the keyboard into pairing mode. The pairing with my MacBook Pro, Mac Mini and my Thinkpad running Manjaro Linux worked right away. Some people reported having connectivity issues during the pairing process but I didn&rsquo;t experience any of those. I am also using a Logitech MX Master 2s on all 3 devices and here I also didn&rsquo;t experience any issues. Switching between the devices is pretty fast too (&lt; 1s) by pressing the <code>fn1 + {Q, W, E}</code> keys.</p>
<h2 id="experience">Experience</h2>
<p>As expected, the Keychron K6 feels completely different compared to the Magic keyboard. It is thick, the keys go way down when being pressed without giving to much resistance and they make this fantastic and loud &ldquo;clicking&rdquo; sound. It almost feels like typing on my old Cherry keyboard from the 90s. Switching between devices is flawless and pretty fast. Since the K6 has a 65% keyboard layout, there are no dedicated F-XX keys or special keys for controlling audio or display brightness. There are however two function keys <code>fn1</code> and <code>fn2</code> which turn the number keys into the F keys or action keys respectively. One thing to note here: the K6 doesn&rsquo;t have a dedicated <code>del</code> key which might be frustrating for some people. The delete key is hidden behind the <code>fn1 + [</code> combination. Overall the typing experience is great and it is just fun typing on this keyboard.</p>
<p><img src="/img/keychronk6/k6vsmagic.jpg" alt="k6vsmagic"></p>
<p>One word regarding the thickness: when I say the K6 is thick, I really mean thick. Just imagine to stack up 5 Magic keyboards on top of each other. This will give you an idea how big the K6 actually is. Here is a side to side comparison of the K6 and the Magic keyboard.</p>
<h2 id="battery-life">Battery Life</h2>
<p>With 4000mAh the K6 has quite a durable battery build in. According to the specs, the keyboard should last 9 days when used with backlighting turned on. As I am only rarely use the backlight, I had to charge the keyboard once upon arrival 4 weeks ago.</p>
<h2 id="verdict">Verdict</h2>
<p>Overall the Keychron K6 is a great mechanical keyboard and offers a lot of value for the buck. Setup and connectivity is flawless and easy. The typing experience is smooth, however I would go for the heavier blue Gateron switches in the future - but that is my personal taste. I think the brown Gateron switches will be fine for 99% of the folks out there. The only thing to consider before buying the Keychron K6 is it&rsquo;s height. I would definitely add the Palm Rest to my shopping basket as using the K6 without will be a little bit hard on your wrists over time. Apart from that, if you are on the lookout for a new compact mechanical keyboard, look no further as you can&rsquo;t go wrong with the Keychron K6.</p>
]]></content></item><item><title>Installing Docker on a Raspberry Pi</title><link>https://afritzler.github.io/posts/installing-docker-on-a-raspberry-pi/</link><pubDate>Mon, 18 May 2020 22:20:02 +0200</pubDate><guid>https://afritzler.github.io/posts/installing-docker-on-a-raspberry-pi/</guid><description>This is an easy step-by-step guide on how to install Docker on your Raspberry Pi. This setup targets Raspbian based Pi&amp;rsquo;s but should also work on Ubuntu.
First make sure your system is up to date
sudo apt-get update &amp;amp;&amp;amp; sudo apt-get upgrade Get the installation script and run it
curl -fsSL https://get.docker.com -o get-docker.sh sudo sh get-docker.sh The last thing left now is to add your pi user (or any other) to the docker group in order to interact with the Docker daemon.</description><content type="html"><![CDATA[<p>This is an easy step-by-step guide on how to install Docker on your Raspberry Pi. This setup targets Raspbian based Pi&rsquo;s but should also work on Ubuntu.</p>
<p>First make sure your system is up to date</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>sudo apt-get update <span style="color:#f92672">&amp;&amp;</span> sudo apt-get upgrade
</span></span></code></pre></div><p>Get the installation script and run it</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>curl -fsSL https://get.docker.com -o get-docker.sh
</span></span><span style="display:flex;"><span>sudo sh get-docker.sh
</span></span></code></pre></div><p>The last thing left now is to add your <code>pi</code> user (or any other) to the <code>docker</code> group in order to interact with the Docker daemon.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>sudo usermod -aG docker Pi
</span></span></code></pre></div><p>To validate that the installation was successful try to execute the following commands or run a <code>hello-world</code> container.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>docker version
</span></span><span style="display:flex;"><span>docker info
</span></span><span style="display:flex;"><span>docker run hello-world
</span></span></code></pre></div><p>The end!</p>
]]></content></item><item><title>Using Kind together with a Local Docker Registry</title><link>https://afritzler.github.io/posts/using-kind-together-with-a-local-docker-registry/</link><pubDate>Mon, 02 Mar 2020 00:00:00 +0000</pubDate><guid>https://afritzler.github.io/posts/using-kind-together-with-a-local-docker-registry/</guid><description>If you want to test your Docker images inside a Kubernetes cluster before pushing them to a public repository, using kind in conjunction with a local repository might be just the solution for you.
Just create a script call kind-with-registry.sh which contains the following code
#!/bin/sh set -o errexit # desired cluster name; default is &amp;#34;kind&amp;#34; KIND_CLUSTER_NAME=&amp;#34;${KIND_CLUSTER_NAME:-kind}&amp;#34; # create registry container unless it already exists reg_name=&amp;#39;kind-registry&amp;#39; reg_port=&amp;#39;5000&amp;#39; running=&amp;#34;$(docker inspect -f &amp;#39;{{.</description><content type="html"><![CDATA[<p>If you want to test your Docker images inside a Kubernetes cluster before pushing them to a public repository, using <code>kind</code> in conjunction with a local repository might be just the solution for you.</p>
<p>Just create a script call <code>kind-with-registry.sh</code> which contains the following code</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span><span style="color:#75715e">#!/bin/sh
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>set -o errexit
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># desired cluster name; default is &#34;kind&#34;</span>
</span></span><span style="display:flex;"><span>KIND_CLUSTER_NAME<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;</span><span style="color:#e6db74">${</span>KIND_CLUSTER_NAME<span style="color:#66d9ef">:-</span>kind<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># create registry container unless it already exists</span>
</span></span><span style="display:flex;"><span>reg_name<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;kind-registry&#39;</span>
</span></span><span style="display:flex;"><span>reg_port<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;5000&#39;</span>
</span></span><span style="display:flex;"><span>running<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;</span><span style="color:#66d9ef">$(</span>docker inspect -f <span style="color:#e6db74">&#39;{{.State.Running}}&#39;</span> <span style="color:#e6db74">&#34;</span><span style="color:#e6db74">${</span>reg_name<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span> 2&gt;/dev/null <span style="color:#f92672">||</span> true<span style="color:#66d9ef">)</span><span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> <span style="color:#f92672">[</span> <span style="color:#e6db74">&#34;</span><span style="color:#e6db74">${</span>running<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span> !<span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;true&#39;</span> <span style="color:#f92672">]</span>; <span style="color:#66d9ef">then</span>
</span></span><span style="display:flex;"><span>  docker run <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>    -d --restart<span style="color:#f92672">=</span>always -p <span style="color:#e6db74">&#34;</span><span style="color:#e6db74">${</span>reg_port<span style="color:#e6db74">}</span><span style="color:#e6db74">:5000&#34;</span> --name <span style="color:#e6db74">&#34;</span><span style="color:#e6db74">${</span>reg_name<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span> <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>    registry:2
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">fi</span>
</span></span><span style="display:flex;"><span>reg_ip<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;</span><span style="color:#66d9ef">$(</span>docker inspect -f <span style="color:#e6db74">&#39;{{.NetworkSettings.IPAddress}}&#39;</span> <span style="color:#e6db74">&#34;</span><span style="color:#e6db74">${</span>reg_name<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span><span style="color:#66d9ef">)</span><span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># create a cluster with the local registry enabled in containerd</span>
</span></span><span style="display:flex;"><span>cat <span style="color:#e6db74">&lt;&lt;EOF | kind create cluster --name &#34;${KIND_CLUSTER_NAME}&#34; --config=-
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">kind: Cluster
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">apiVersion: kind.x-k8s.io/v1alpha4
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">containerdConfigPatches:
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">- |-
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">  [plugins.&#34;io.containerd.grpc.v1.cri&#34;.registry.mirrors.&#34;localhost:${reg_port}&#34;]
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    endpoint = [&#34;http://${reg_ip}:${reg_port}&#34;]
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">EOF</span>
</span></span></code></pre></div><p>This will spin up a <code>kind</code> cluster plus a local registry which is located under <code>localhost:5000</code>. <code>docker ps</code> should produce the following output if everything went well</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>CONTAINER ID        IMAGE                  COMMAND                  CREATED             STATUS              PORTS                       NAMES
</span></span><span style="display:flex;"><span>7b88dbd4757b        kindest/node:v1.17.0   <span style="color:#e6db74">&#34;/usr/local/bin/entr…&#34;</span>   <span style="color:#ae81ff">11</span> minutes ago      Up <span style="color:#ae81ff">11</span> minutes       127.0.0.1:32769-&gt;6443/tcp   kind-control-plane
</span></span><span style="display:flex;"><span>e40321acce8b        registry:2             <span style="color:#e6db74">&#34;/entrypoint.sh /etc…&#34;</span>   <span style="color:#ae81ff">14</span> minutes ago      Up <span style="color:#ae81ff">14</span> minutes       0.0.0.0:5000-&gt;5000/tcp      kind-registry
</span></span></code></pre></div><h2 id="usage">Usage</h2>
<p>To use your local setup run the following command</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span><span style="color:#75715e"># inside your Dockerfile folder</span>
</span></span><span style="display:flex;"><span>docker build localhost:5000/hello-app:1.0 .
</span></span><span style="display:flex;"><span>docker push localhost:5000/hello-app:1.0
</span></span><span style="display:flex;"><span>kubectl create deployment hello-server --image<span style="color:#f92672">=</span>localhost:5000/hello-app:1.0
</span></span></code></pre></div><h2 id="references">References</h2>
<p>This post is based on the official <code>kind</code> <a href="https://kind.sigs.k8s.io/docs/user/local-registry/">documentation</a>. Additional information can be also found in the <a href="https://github.com/kubernetes-sigs/kind">kind</a> GitHub repository.</p>
]]></content></item></channel></rss>